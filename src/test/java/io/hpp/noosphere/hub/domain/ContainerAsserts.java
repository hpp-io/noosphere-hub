package io.hpp.noosphere.hub.domain;

import static io.hpp.noosphere.hub.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ContainerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContainerAllPropertiesEquals(Container expected, Container actual) {
        assertContainerAutoGeneratedPropertiesEquals(expected, actual);
        assertContainerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContainerAllUpdatablePropertiesEquals(Container expected, Container actual) {
        assertContainerUpdatableFieldsEquals(expected, actual);
        assertContainerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContainerAutoGeneratedPropertiesEquals(Container expected, Container actual) {
        assertThat(actual)
            .as("Verify Container auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContainerUpdatableFieldsEquals(Container expected, Container actual) {
        assertThat(actual)
            .as("Verify Container relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getWalletAddress()).as("check walletAddress").isEqualTo(expected.getWalletAddress()))
            .satisfies(a -> assertThat(a.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPrice()))
            .satisfies(a -> assertThat(a.getStatusCode()).as("check statusCode").isEqualTo(expected.getStatusCode()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getParameters()).as("check parameters").isEqualTo(expected.getParameters()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContainerUpdatableRelationshipsEquals(Container expected, Container actual) {
        // empty method
    }
}
