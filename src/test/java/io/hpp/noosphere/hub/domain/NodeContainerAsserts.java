package io.hpp.noosphere.hub.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class NodeContainerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNodeContainerAllPropertiesEquals(NodeContainer expected, NodeContainer actual) {
        assertNodeContainerAutoGeneratedPropertiesEquals(expected, actual);
        assertNodeContainerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNodeContainerAllUpdatablePropertiesEquals(NodeContainer expected, NodeContainer actual) {
        assertNodeContainerUpdatableFieldsEquals(expected, actual);
        assertNodeContainerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNodeContainerAutoGeneratedPropertiesEquals(NodeContainer expected, NodeContainer actual) {
        assertThat(actual)
            .as("Verify NodeContainer auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNodeContainerUpdatableFieldsEquals(NodeContainer expected, NodeContainer actual) {
        assertThat(actual)
            .as("Verify NodeContainer relevant properties")
            .satisfies(a -> assertThat(a.getStatusCode()).as("check statusCode").isEqualTo(expected.getStatusCode()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNodeContainerUpdatableRelationshipsEquals(NodeContainer expected, NodeContainer actual) {
        assertThat(actual)
            .as("Verify NodeContainer relationships")
            .satisfies(a -> assertThat(a.getNode()).as("check node").isEqualTo(expected.getNode()))
            .satisfies(a -> assertThat(a.getContainer()).as("check container").isEqualTo(expected.getContainer()));
    }
}
